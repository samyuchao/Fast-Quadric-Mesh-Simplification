//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Simplify : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Simplify(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Simplify obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Simplify() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cppdllPINVOKE.delete_Simplify(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public class Triangle : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Triangle(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Triangle obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Triangle() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            cppdllPINVOKE.delete_Simplify_Triangle(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public SWIGTYPE_p_int v {
      set {
        cppdllPINVOKE.Simplify_Triangle_v_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = cppdllPINVOKE.Simplify_Triangle_v_get(swigCPtr);
        SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_double err {
      set {
        cppdllPINVOKE.Simplify_Triangle_err_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = cppdllPINVOKE.Simplify_Triangle_err_get(swigCPtr);
        SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
        return ret;
      } 
    }
  
    public int deleted {
      set {
        cppdllPINVOKE.Simplify_Triangle_deleted_set(swigCPtr, value);
      } 
      get {
        int ret = cppdllPINVOKE.Simplify_Triangle_deleted_get(swigCPtr);
        return ret;
      } 
    }
  
    public int dirty {
      set {
        cppdllPINVOKE.Simplify_Triangle_dirty_set(swigCPtr, value);
      } 
      get {
        int ret = cppdllPINVOKE.Simplify_Triangle_dirty_get(swigCPtr);
        return ret;
      } 
    }
  
    public vec3f n {
      set {
        cppdllPINVOKE.Simplify_Triangle_n_set(swigCPtr, vec3f.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = cppdllPINVOKE.Simplify_Triangle_n_get(swigCPtr);
        vec3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new vec3f(cPtr, false);
        return ret;
      } 
    }
  
    public Triangle() : this(cppdllPINVOKE.new_Simplify_Triangle(), true) {
    }
  
  }

  public class Vertex : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Vertex(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Vertex obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Vertex() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            cppdllPINVOKE.delete_Simplify_Vertex(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public vec3f p {
      set {
        cppdllPINVOKE.Simplify_Vertex_p_set(swigCPtr, vec3f.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = cppdllPINVOKE.Simplify_Vertex_p_get(swigCPtr);
        vec3f ret = (cPtr == global::System.IntPtr.Zero) ? null : new vec3f(cPtr, false);
        return ret;
      } 
    }
  
    public int tstart {
      set {
        cppdllPINVOKE.Simplify_Vertex_tstart_set(swigCPtr, value);
      } 
      get {
        int ret = cppdllPINVOKE.Simplify_Vertex_tstart_get(swigCPtr);
        return ret;
      } 
    }
  
    public int tcount {
      set {
        cppdllPINVOKE.Simplify_Vertex_tcount_set(swigCPtr, value);
      } 
      get {
        int ret = cppdllPINVOKE.Simplify_Vertex_tcount_get(swigCPtr);
        return ret;
      } 
    }
  
    public SymetricMatrix q {
      set {
        cppdllPINVOKE.Simplify_Vertex_q_set(swigCPtr, SymetricMatrix.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = cppdllPINVOKE.Simplify_Vertex_q_get(swigCPtr);
        SymetricMatrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new SymetricMatrix(cPtr, false);
        return ret;
      } 
    }
  
    public int border {
      set {
        cppdllPINVOKE.Simplify_Vertex_border_set(swigCPtr, value);
      } 
      get {
        int ret = cppdllPINVOKE.Simplify_Vertex_border_get(swigCPtr);
        return ret;
      } 
    }
  
    public Vertex() : this(cppdllPINVOKE.new_Simplify_Vertex(), true) {
    }
  
  }

  public class Ref : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Ref(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Ref obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Ref() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            cppdllPINVOKE.delete_Simplify_Ref(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public int tid {
      set {
        cppdllPINVOKE.Simplify_Ref_tid_set(swigCPtr, value);
      } 
      get {
        int ret = cppdllPINVOKE.Simplify_Ref_tid_get(swigCPtr);
        return ret;
      } 
    }
  
    public int tvertex {
      set {
        cppdllPINVOKE.Simplify_Ref_tvertex_set(swigCPtr, value);
      } 
      get {
        int ret = cppdllPINVOKE.Simplify_Ref_tvertex_get(swigCPtr);
        return ret;
      } 
    }
  
    public Ref() : this(cppdllPINVOKE.new_Simplify_Ref(), true) {
    }
  
  }

  public SWIGTYPE_p_std__vectorT_Simplify__Triangle_t triangles {
    set {
      cppdllPINVOKE.Simplify_triangles_set(swigCPtr, SWIGTYPE_p_std__vectorT_Simplify__Triangle_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = cppdllPINVOKE.Simplify_triangles_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Simplify__Triangle_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Simplify__Triangle_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Simplify__Vertex_t vertices {
    set {
      cppdllPINVOKE.Simplify_vertices_set(swigCPtr, SWIGTYPE_p_std__vectorT_Simplify__Vertex_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = cppdllPINVOKE.Simplify_vertices_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Simplify__Vertex_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Simplify__Vertex_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Simplify__Ref_t refs {
    set {
      cppdllPINVOKE.Simplify_refs_set(swigCPtr, SWIGTYPE_p_std__vectorT_Simplify__Ref_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = cppdllPINVOKE.Simplify_refs_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Simplify__Ref_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Simplify__Ref_t(cPtr, false);
      return ret;
    } 
  }

  public double vertex_error(SymetricMatrix q, double x, double y, double z) {
    double ret = cppdllPINVOKE.Simplify_vertex_error(swigCPtr, SymetricMatrix.getCPtr(q), x, y, z);
    if (cppdllPINVOKE.SWIGPendingException.Pending) throw cppdllPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double calculate_error(int id_v1, int id_v2, vec3f p_result) {
    double ret = cppdllPINVOKE.Simplify_calculate_error(swigCPtr, id_v1, id_v2, vec3f.getCPtr(p_result));
    if (cppdllPINVOKE.SWIGPendingException.Pending) throw cppdllPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool flipped(vec3f p, int i0, int i1, Simplify.Vertex v0, Simplify.Vertex v1, IntVector deleted) {
    bool ret = cppdllPINVOKE.Simplify_flipped(swigCPtr, vec3f.getCPtr(p), i0, i1, Simplify.Vertex.getCPtr(v0), Simplify.Vertex.getCPtr(v1), IntVector.getCPtr(deleted));
    if (cppdllPINVOKE.SWIGPendingException.Pending) throw cppdllPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void update_triangles(int i0, Simplify.Vertex v, IntVector deleted, SWIGTYPE_p_int deleted_triangles) {
    cppdllPINVOKE.Simplify_update_triangles(swigCPtr, i0, Simplify.Vertex.getCPtr(v), IntVector.getCPtr(deleted), SWIGTYPE_p_int.getCPtr(deleted_triangles));
    if (cppdllPINVOKE.SWIGPendingException.Pending) throw cppdllPINVOKE.SWIGPendingException.Retrieve();
  }

  public void update_mesh(int iteration) {
    cppdllPINVOKE.Simplify_update_mesh(swigCPtr, iteration);
  }

  public void compact_mesh() {
    cppdllPINVOKE.Simplify_compact_mesh(swigCPtr);
  }

  public double min(double v1, double v2) {
    double ret = cppdllPINVOKE.Simplify_min(swigCPtr, v1, v2);
    return ret;
  }

  public void simplify_mesh(int target_count, double agressiveness, bool verbose) {
    cppdllPINVOKE.Simplify_simplify_mesh__SWIG_0(swigCPtr, target_count, agressiveness, verbose);
  }

  public void simplify_mesh(int target_count, double agressiveness) {
    cppdllPINVOKE.Simplify_simplify_mesh__SWIG_1(swigCPtr, target_count, agressiveness);
  }

  public void simplify_mesh(int target_count) {
    cppdllPINVOKE.Simplify_simplify_mesh__SWIG_2(swigCPtr, target_count);
  }

  public void simplify_mesh_lossless(bool verbose) {
    cppdllPINVOKE.Simplify_simplify_mesh_lossless__SWIG_0(swigCPtr, verbose);
  }

  public void simplify_mesh_lossless() {
    cppdllPINVOKE.Simplify_simplify_mesh_lossless__SWIG_1(swigCPtr);
  }

  public void write_obj(string filename) {
    cppdllPINVOKE.Simplify_write_obj(swigCPtr, filename);
  }

  public void load_obj(string filename) {
    cppdllPINVOKE.Simplify_load_obj(swigCPtr, filename);
  }

  public void AddVertex(double x, double y, double z) {
    cppdllPINVOKE.Simplify_AddVertex(swigCPtr, x, y, z);
  }

  public void AddTriangle(int v0, int v1, int v2) {
    cppdllPINVOKE.Simplify_AddTriangle(swigCPtr, v0, v1, v2);
  }

  public int vCount() {
    int ret = cppdllPINVOKE.Simplify_vCount(swigCPtr);
    return ret;
  }

  public int triCount() {
    int ret = cppdllPINVOKE.Simplify_triCount(swigCPtr);
    return ret;
  }

  public void GetVertex(int index, vec3f a) {
    cppdllPINVOKE.Simplify_GetVertex(swigCPtr, index, vec3f.getCPtr(a));
    if (cppdllPINVOKE.SWIGPendingException.Pending) throw cppdllPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTriangle(int index, IntVector v) {
    cppdllPINVOKE.Simplify_GetTriangle(swigCPtr, index, IntVector.getCPtr(v));
    if (cppdllPINVOKE.SWIGPendingException.Pending) throw cppdllPINVOKE.SWIGPendingException.Retrieve();
  }

  public Simplify() : this(cppdllPINVOKE.new_Simplify(), true) {
  }

}
